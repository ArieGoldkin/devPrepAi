/**
 * {{ENTITY_NAME_CAPS}} Schemas
 * Zod schemas for {{ENTITY_DESCRIPTION}} types
 * Used by tRPC procedures for runtime validation
 */
import { z } from "zod";

// Constants for validation rules
const MIN_{{CONST_NAME}} = 1;
const MAX_{{CONST_NAME}} = 100;

/**
 * {{ENTITY_NAME_CAPS}} Schema
 * TODO: Define your entity schema
 */
export const {{ENTITY_NAME}}Schema = z.object({
  id: z.string(),
  // TODO: Add your fields here
  // Example:
  // name: z.string().min(1, "Name is required"),
  // value: z.number().int().min(MIN_VALUE).max(MAX_VALUE),
  // optional: z.string().optional(),
});

/**
 * Create {{ENTITY_NAME_CAPS}} Input Schema
 * Validates request to create a {{ENTITY_NAME}}
 */
export const create{{ENTITY_NAME_CAPS}}InputSchema = z.object({
  // TODO: Define input fields
  // Example:
  // name: z.string().min(1),
  // value: z.number(),
});

/**
 * Create {{ENTITY_NAME_CAPS}} Output Schema
 * Validates response from create operation
 */
export const create{{ENTITY_NAME_CAPS}}OutputSchema = z.object({
  {{ENTITY_NAME}}: {{ENTITY_NAME}}Schema,
  success: z.boolean(),
});

// Export inferred types
export type {{ENTITY_NAME_CAPS}} = z.infer<typeof {{ENTITY_NAME}}Schema>;
export type Create{{ENTITY_NAME_CAPS}}Input = z.infer<typeof create{{ENTITY_NAME_CAPS}}InputSchema>;
export type Create{{ENTITY_NAME_CAPS}}Output = z.infer<typeof create{{ENTITY_NAME_CAPS}}OutputSchema>;
